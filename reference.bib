% This file was created with JabRef 2.10b2.
% Encoding: UTF8


@InProceedings{Andrews2005,
  Title                    = {Is mutation an appropriate tool for testing experiments? [software testing]},
  Author                   = {Andrews, J.H. and Briand, L.C. and Labiche, Y.},
  Booktitle                = {Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference on},
  Year                     = {2005},
  Month                    = {May},
  Pages                    = {402-411},

  Doi                      = {10.1109/ICSE.2005.1553583},
  Keywords                 = {program testing;mutation operators;software testing;Computer science;Debugging;Design engineering;Fault detection;Genetic mutations;Instruments;Performance evaluation;Permission;Software testing;Systems engineering and theory},
  Owner                    = {perham},
  Timestamp                = {2015.03.05}
}

@Book{Beck2002,
  Title                    = {Test Driven Development: By Example},
  Author                   = {K. Beck},
  Publisher                = {Addison-Wesley Longman Publishing Co., Inc.},
  Year                     = {2002},

  Address                  = {Boston, MA, USA},

  ISBN                     = {0321146530}
}

@PhdThesis{Budd1980,
  Title                    = {Mutation Analysis of Program Test Data},
  Author                   = {Budd, T. A.},
  Year                     = {1980},

  Address                  = {New Haven, CT, USA},
  Note                     = {AAI8025191},

  Owner                    = {perham},
  Publisher                = {Yale University},
  Timestamp                = {2014.08.26}
}

@InProceedings{Counsell2006,
  Title                    = {The Effectiveness of Refactoring, Based on a Compatibility Testing Taxonomy and a Dependency Graph},
  Author                   = {Counsell, S. and Hierons, R.M. and Najjar, R. and Loizou, G. and Hassoun, Y.},
  Booktitle                = {Testing: Academic and Industrial Conference - Practice And Research Techniques, 2006. TAIC PART 2006. Proceedings},
  Year                     = {2006},
  Month                    = {Aug},
  Pages                    = {181-192},

  Doi                      = {10.1109/TAIC-PART.2006.33},
  Keywords                 = {Java;graph theory;software maintenance;Java open-source systems;compatibility testing taxonomy;dependency graph;post-refactoring repeatability;semantic-preserving refactorings;Appraisal;Computer science;Educational institutions;Information systems;Java;Mathematics;Open source software;Software maintenance;Taxonomy;Testing}
}

@InProceedings{Daniel2007,
  Title                    = {Automated Testing of Refactoring Engines},
  Author                   = {Daniel, B. and Dig, D. and Garcia, K. and Marinov, D.},
  Booktitle                = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
  Year                     = {2007},

  Address                  = {New York, NY, USA},
  Pages                    = {185--194},
  Publisher                = {ACM},
  Series                   = {ESEC-FSE '07},

  Acmid                    = {1287651},
  Doi                      = {10.1145/1287624.1287651},
  ISBN                     = {978-1-59593-811-4},
  Keywords                 = {automated testing, bounded-exhaustive testing, imperative generators, refactoring engines, test data generation},
  Location                 = {Dubrovnik, Croatia},
  Numpages                 = {10},
  Owner                    = {perham},
  Timestamp                = {2015.03.06},
  Url                      = {http://doi.acm.org/10.1145/1287624.1287651}
}

@InProceedings{Delahaye2013,
  Title                    = {A Comparison of Mutation Analysis Tools for Java},
  Author                   = {Delahaye, M. and du Bousquet, L.},
  Booktitle                = {Quality Software (QSIC), 2013 13th International Conference on},
  Year                     = {2013},
  Month                    = {July},
  Pages                    = {187-195},

  Doi                      = {10.1109/QSIC.2013.47},
  Keywords                 = {Java;program testing;software quality;Java;mutants;mutation analysis tool;software developers;test suite quality;Benchmark testing;Documentation;Educational institutions;Java;Libraries;Software;mutation testing;tool comparison},
  Owner                    = {APSXR},
  Timestamp                = {2014.07.15}
}

@Article{DeMillo1978,
  Title                    = {Hints on Test Data Selection: Help for the Practicing Programmer},
  Author                   = {DeMillo, R. A. and Lipton, R. J. and Sayward, F. G.},
  Journal                  = {Computer},
  Year                     = {1978},

  Month                    = apr,
  Number                   = {4},
  Pages                    = {34--41},
  Volume                   = {11},

  Acmid                    = {1301357},
  Address                  = {Los Alamitos, CA, USA},
  Doi                      = {10.1109/C-M.1978.218136},
  ISSN                     = {0018-9162},
  Issue_date               = {April 1978},
  Numpages                 = {8},
  Owner                    = {perham},
  Publisher                = {IEEE Computer Society Press},
  Timestamp                = {2014.08.21},
  Url                      = {http://dx.doi.org/10.1109/C-M.1978.218136}
}

@InProceedings{vanDeursen2002,
  Title                    = {The Video Store Revisited -- Thoughts on Refactoring and Testing},
  Author                   = {van Deursen A. and Moonen L.},
  Booktitle                = {Proc. Int'l Conf. eXtreme Programming and Flexible Processes in Software Engineering},
  Year                     = {2002},
  Note                     = {Alghero, Sardinia, Italy},
  Pages                    = {71--76},

  Added-at                 = {2007-09-26T10:37:27.000+0200},
  Biburl                   = {http://www.bibsonomy.org/bibtex/241f9ba4e90d6b381144a0efa9d7544a9/evol},
  Keywords                 = {XP refactoring testing},
  Timestamp                = {2007-09-26T11:06:57.000+0200}
}

@InProceedings{Deursen2001,
  Title                    = {Refactoring Test Code},
  Author                   = {A. van Deursen and L. Moonen and A. Bergh and G. Kok},
  Booktitle                = {Proc. Int'l Conf. eXtreme Programming and Flexible Processes in Software Engineering)},
  Year                     = {2001},
  Pages                    = {92--95}
}

@Book{Fowler1999,
  Title                    = {Refactoring: Improving the Design of Existing Code},
  Author                   = {Fowler, M.},
  Publisher                = {Addison-Wesley Longman Publishing Co., Inc.},
  Year                     = {1999},

  ISBN                     = {0-201-48567-2},
  Key                      = {{$\!\!$}}
}

@Article{Jia2011,
  Title                    = {An Analysis and Survey of the Development of Mutation Testing},
  Author                   = {Y. Jia and Harman, M.},
  Journal                  = {Software Engineering, IEEE Transactions on},
  Year                     = {2011},

  Month                    = {Sept},
  Number                   = {5},
  Pages                    = {649-678},
  Volume                   = {37},

  Doi                      = {10.1109/TSE.2010.62},
  ISSN                     = {0098-5589},
  Keywords                 = {fault diagnosis;program testing;comprehensive analysis;development trend analysis;empirical results;fault-based software testing technique;mutation testing development;mutation testing technique;mutation testing tool;Automata;Books;Computer languages;Educational institutions;Fault detection;Genetic mutations;History;Java;Programming profession;Software testing;Mutation testing;survey.},
  Owner                    = {APSXR},
  Timestamp                = {2014.07.15}
}

@TechReport{Just2014,
  Title                    = {Are Mutants a Valid Substitute for Real Faults in Software Testing?},
  Author                   = {Just, R. and Jalali, D. and Inozemtseva, L. and Ernst, M. D. and Holmes, R. and Fraser, G.},
  Institution              = {University of Washington},
  Year                     = {2014},
  Number                   = {UW-CSE-14-02-02},

  Owner                    = {perham},
  Timestamp                = {2014.08.17}
}

@InProceedings{Kim2011,
  Title                    = {An Empirical Investigation into the Role of API-level Refactorings During Software Evolution},
  Author                   = {Kim, M. and Cai, D. and Kim, S.},
  Booktitle                = {Proceedings of the 33rd International Conference on Software Engineering},
  Year                     = {2011},

  Address                  = {New York, NY, USA},
  Pages                    = {151--160},
  Publisher                = {ACM},
  Series                   = {ICSE '11},

  Acmid                    = {1985815},
  Doi                      = {10.1145/1985793.1985815},
  ISBN                     = {978-1-4503-0445-0},
  Keywords                 = {defects, empirical study, refactoring, release cycle, software evolution},
  Location                 = {Waikiki, Honolulu, HI, USA},
  Numpages                 = {10},
  Owner                    = {perham},
  Timestamp                = {2015.03.06},
  Url                      = {http://doi.acm.org/10.1145/1985793.1985815}
}

@InProceedings{Kim2010,
  Title                    = {Ref-Finder: A Refactoring Reconstruction Tool Based on Logic Query Templates},
  Author                   = {Kim, M. and Gee M. and Loh A. and Rachatasumrit N.},
  Booktitle                = {Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  Year                     = {2010},

  Address                  = {New York, NY, USA},
  Pages                    = {371--372},
  Publisher                = {ACM},
  Series                   = {FSE '10},

  Acmid                    = {1882353},
  Doi                      = {10.1145/1882291.1882353},
  ISBN                     = {978-1-60558-791-2},
  Keywords                 = {logic-based program representation, program differencing, refactoring, software evolution},
  Location                 = {Santa Fe, New Mexico, USA},
  Numpages                 = {2},
  Owner                    = {perham},
  Timestamp                = {2015.03.04},
  Url                      = {http://doi.acm.org/10.1145/1882291.1882353}
}

@InProceedings{Ma2002,
  Title                    = {Inter-class mutation operators for Java},
  Author                   = {Yu-Seung Ma and Yong-Rae Kwon and Offutt, J.},
  Booktitle                = {Software Reliability Engineering, 2002. ISSRE 2003. Proceedings. 13th International Symposium on},
  Year                     = {2002},
  Pages                    = {352-363},

  Abstract                 = {The effectiveness of mutation testing depends heavily on the types of faults that the mutation operators are designed to represent. Therefore, the quality of the mutation operators is key to mutation testing. Mutation testing has traditionally been applied to procedural-based languages, and mutation operators have been developed to support most of their language features. Object-oriented programming languages contain new language features, most notably inheritance, polymorphism, and dynamic binding. Not surprisingly; these language features allow new kinds of faults, some of which are not modeled by traditional mutation operators. Although mutation operators for OO languages have previously been suggested, our work in OO faults indicate that the previous operators are insufficient to test these OO language features, particularly at the class testing level. This paper introduces a new set of class mutation operators for the OO language Java. These operators are based on specific OO faults and can be used to detect faults involving inheritance, polymorphism, and dynamic binding, thus are useful for inter-class testing. An initial Java mutation tool has recently been completed, and a more powerful version is currently under construction.},
  Doi                      = {10.1109/ISSRE.2002.1173287},
  ISSN                     = {1071-9458},
  Keywords                 = {Java;inheritance;object-oriented programming;program testing;Java;class testing level;dynamic binding;inheritance;inter-class mutation operators;mutation testing;object-oriented programming languages;polymorphism;Computer science;Dynamic programming;Encapsulation;Fault detection;Genetic mutations;History;Java;Object oriented modeling;Object oriented programming;System testing},
  Owner                    = {perham},
  Timestamp                = {2015.04.13}
}

@InProceedings{Marick1991,
  Title                    = {Experience with the cost of different coverage goals for testing},
  Author                   = {Marick, B.},
  Booktitle                = {Proc. Pacific Northwest Soft. Quality Conf},
  Year                     = {1991},
  Pages                    = {147--164},

  Owner                    = {perham},
  Timestamp                = {2015.03.06}
}

@Book{Meszaros2006,
  Title                    = {XUnit Test Patterns: Refactoring Test Code},
  Author                   = {Meszaros, G.},
  Publisher                = {Prentice Hall PTR},
  Year                     = {2006},

  Address                  = {Upper Saddle River, NJ, USA},

  ISBN                     = {0131495054}
}

@InCollection{Moonen2008,
  Title                    = {On the Interplay Between Software Testing and Evolution and its Effect on Program Comprehension},
  Author                   = {Moonen, L. and van Deursen A. and Zaidman A. and Bruntink M.},
  Booktitle                = {Software Evolution},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2008},
  Pages                    = {173-202},

  Doi                      = {10.1007/978-3-540-76440-3_8},
  ISBN                     = {978-3-540-76439-7},
  Language                 = {English},
  Owner                    = {perham},
  Timestamp                = {2015.03.04},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-76440-3_8}
}

@InCollection{Offutt2001,
  Title                    = {Mutation Testing for the New Century},
  Author                   = {Offutt, A. J. and Untch, R. H.},
  Publisher                = {Kluwer Academic Publishers},
  Year                     = {2001},

  Address                  = {Norwell, MA, USA},
  Chapter                  = {Mutation 2000: Uniting the Orthogonal},
  Editor                   = {Wong, W. E.},
  Pages                    = {34--44},

  Acmid                    = {571314},
  ISBN                     = {0-7923-7323-5},
  Numpages                 = {11},
  Owner                    = {perham},
  Timestamp                = {2014.08.21},
  Url                      = {http://dl.acm.org/citation.cfm?id=571305.571314}
}

@Article{Offutt2011,
  Title                    = {A mutation carol: Past, present and future },
  Author                   = {J. Offutt},
  Journal                  = {Information and Software Technology },
  Year                     = {2011},
  Note                     = {Special Section on Mutation Testing },
  Number                   = {10},
  Pages                    = {1098 - 1107},
  Volume                   = {53},

  Abstract                 = {Context The field of mutation analysis has been growing, both in the number of published papers and the number of active researchers. This special issue provides a sampling of recent advances and ideas. But do all the new researchers know where we started? Objective To imagine where we are going, we must first know where we are. To understand where we are, we must know where we have been. This paper reviews past mutation analysis research, considers the present, then imagines possible future directions. Method A retrospective study of past trends lets us the ability to see the current state of mutation research in a clear context, allowing us to imagine and then create future vectors. Results The value of mutation has greatly expanded since the early view of mutation as an expensive way to unit test subroutines. Our understanding of what mutation is and how it can help has become much deeper and broader. Conclusion Mutation analysis has been around for 35 years, but we are just now beginning to see its full potential. The papers in this issue and future mutation workshops will eventually allow us to realize this potential. },
  Doi                      = {http://dx.doi.org/10.1016/j.infsof.2011.03.007},
  ISSN                     = {0950-5849},
  Keywords                 = {Mutation analysis},
  Owner                    = {perham},
  Timestamp                = {2014.08.29},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S0950584911000838}
}

@PhdThesis{Opdyke1992,
  Title                    = {Refactoring Object-oriented Frameworks},
  Author                   = {Opdyke, W. F.},
  Year                     = {1992},

  Address                  = {Champaign, IL, USA},
  Note                     = {UMI Order No. GAX93-05645},

  Publisher                = {University of Illinois at Urbana-Champaign}
}

@MastersThesis{Parsai2015,
  Title                    = {Mutation Analysis: An Industrial Experiment},
  Author                   = {Parsai, A.},
  School                   = {University of Antwerp},
  Year                     = {2015},

  Owner                    = {perham},
  Timestamp                = {2015.03.06}
}

@InProceedings{Pipka2002,
  Title                    = {Refactoring in a 'test firs'-world},
  Author                   = {Pipka, J. U.},
  Booktitle                = {Proc. Int'l Conf. eXtreme Programming and Flexible Processes in Software Engineering},
  Year                     = {2002}
}

@TechReport{Rompaey2006,
  Title                    = {Improving test code reviews with metrics: a pilot study},
  Author                   = {Rompaey, B.V. and Bois B.D. and Demeyer S.},
  Institution              = {Technical report, Lab On Re-Eng., University of Antwerp},
  Year                     = {2006}
}

@Article{Soares2010,
  Title                    = {Making Program Refactoring Safer},
  Author                   = {Soares, G. and Gheyi, R. and Serey, D. and Massoni, T.},
  Journal                  = {Software, IEEE},
  Year                     = {2010},

  Month                    = {July},
  Number                   = {4},
  Pages                    = {52-57},
  Volume                   = {27},

  Abstract                 = {Developers rely on compilation, test suites, and tools to preserve observable behavior during refactoring. However, most refactoring tools don't implement all the preconditions that guarantee refactoring correctness because formally identifying them is cost-prohibitive. Therefore, these tools could perform nonbehavior-preserving transformations. The authors present a tool for improving safety during refactoring that automatically generates a test suite suited for detecting behavioral changes. They used this tool to evaluate seven real case study refactorings (from 3 to 100 KLOC).},
  Doi                      = {10.1109/MS.2010.63},
  ISSN                     = {0740-7459},
  Keywords                 = {software maintenance;compilation;nonbehavior preserving transformations;program refactoring;test suites;behavior preservation;refactoring;software engineering;unit testing},
  Owner                    = {perham},
  Timestamp                = {2015.03.06}
}

@InProceedings{Vonken2012,
  Title                    = {Refactoring with Unit Testing: A Match Made in Heaven?},
  Author                   = {Vonken, F. and Zaidman, A.},
  Booktitle                = {Reverse Engineering (WCRE), 2012 19th Working Conference on},
  Year                     = {2012},
  Month                    = {Oct},
  Pages                    = {29-38},

  Abstract                 = {Unit testing is a basic principle of agile development. Its benefits include early defect detection, defect cause localization and removal of fear to apply changes to the code. As such, unit tests seem to be ideal companions during refactoring, as they provide a safety net which enables to quickly verify that behaviour is indeed preserved. In this study we investigate whether having unit tests available during refactoring actually leads to quicker refactorings and more high-quality code after refactoring. For this, we set up a two-group controlled experiment involving 42 participants. Results indicate that having unit tests available during refactoring does not lead to quicker refactoring or to higher-quality code after refactoring.},
  Doi                      = {10.1109/WCRE.2012.13},
  ISSN                     = {1095-1350},
  Keywords                 = {program testing;software maintenance;software prototyping;agile development;defect cause localization;defect detection;fear removal;refactorings;safety net;two-group controlled experiment;unit testing;Availability;Dispersion;Industries;Inspection;Production;Software;Testing;refactoring;unit testing},
  Owner                    = {perham},
  Timestamp                = {2015.03.06}
}

@InCollection{Wei2012,
  Title                    = {Is Branch Coverage a Good Measure of Testing Effectiveness?},
  Author                   = {Wei, Y. and Meyer, B. and Oriol, M.},
  Booktitle                = {Empirical Software Engineering and Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Meyer, Bertrand and Nordio, Martin},
  Pages                    = {194-212},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7007},

  Doi                      = {10.1007/978-3-642-25231-0_5},
  ISBN                     = {978-3-642-25230-3},
  Keywords                 = {random testing; branch coverage; experimental evaluation},
  Language                 = {English},
  Owner                    = {perham},
  Timestamp                = {2014.11.25},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-25231-0_5}
}

@Book{Yin2003,
  Title                    = {Case Study Research: Design and Methods},
  Author                   = {Yin, R. K.},
  Publisher                = {SAGE Publications},
  Year                     = {2003},
  Series                   = {Applied Social Research Methods},

  Bdsk-url-1               = {http://books.google.co.id/books?id=BWea%5C_9ZGQMwC},
  ISBN                     = {9780761925521},
  Lccn                     = {2002152696},
  Owner                    = {perham},
  Timestamp                = {2015.03.06},
  Url                      = {http://books.google.co.id/books?id=BWea\_9ZGQMwC}
}

@Article{Zhu1997,
  Title                    = {Software Unit Test Coverage and Adequacy},
  Author                   = {Zhu, H. and Hall, P. A. V. and May, J. H. R.},
  Journal                  = {ACM Comput. Surv.},
  Year                     = {1997},

  Month                    = dec,
  Number                   = {4},
  Pages                    = {366--427},
  Volume                   = {29},

  Acmid                    = {267590},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/267580.267590},
  ISSN                     = {0360-0300},
  Issue_date               = {Dec. 1997},
  Keywords                 = {comparing testing effectiveness, fault detection, software unit test, test adequacy criteria, test coverage, testing methods},
  Numpages                 = {62},
  Owner                    = {perham},
  Publisher                = {ACM},
  Timestamp                = {2015.03.06},
  Url                      = {http://doi.acm.org/10.1145/267580.267590}
}

